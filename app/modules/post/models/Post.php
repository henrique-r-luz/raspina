<?php
namespace app\modules\post\models;
use app\components\behaviors\SluggableBehavior;
use app\modules\post\models\base\PostTag;
use meysampg\intldate\IntlDateTrait;
use Yii;
use yii\helpers\Url;

class Post extends \app\modules\post\models\base\Post
{
    use IntlDateTrait;
    /**
     * @inheritdoc
     */
    public $hour;
    public $minute;
    public $date;
    public $comment_count;
    public $more;
    public $tags;
    public $post_id;
    public $auto_save = true;
    public $search;

    public $count;
    public $sum;

    public function behaviors()
    {
        $behaviors = [
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title',
            ],
        ];
       return array_merge($behaviors, parent::behaviors());
    }

    public function rules()
    {
        $parentRules = parent::rules();

        $parentRules[] = [['title'], 'trim'];
        $parentRules[] = ['title', 'filter','filter' => function($value){
            return preg_replace('/\s+/',' ',str_replace(['/','\\'],' ',$value));
        }];
        $parentRules[] = [['pin_post', 'enable_comments'], 'boolean'];

        $parentRules[] = [['hour'], 'integer', 'min' => 0, 'max' => 23];
        $parentRules[] = [['minute'], 'integer', 'min' => 0, 'max' => 59];

        $parentRules[] = [['date'], 'date', 'format' => 'php:Y-m-d'];
        $parentRules[] = [['date'], 'dateValidate', 'skipOnEmpty' => true];

        return $parentRules;
    }

    public function dateValidate()
    {
//        //
//        $this->setOriginTimeZone('America/Los_Angeles');
        if($this->status == 2)
        {
            $currentTime = new \DateTime;

            if (Yii::$app->language == 'fa-IR')
            {
                $date = explode('-', $this->date);
                $newCreatedAt = new \DateTime($this->fromPersian([$date[0], $date[1], $date[2], $this->hour, $this->minute, 0], 'fa')->toGregorian()->setFinalTimeZone(Yii::$app->timeZone)->asDateTime());
            } else
            {
                $newCreatedAt = new \DateTime("{$this->date} {$this->hour}:{$this->minute}");
            }

//            if ($currentTime >= $newCreatedAt)
//            {
//                $this->addError('date', Yii::t('app', 'Send In Future Date Not Valid'));
//            } else
            {
                $this->created_at = $newCreatedAt->format('Y-m-d H:i:s');
            }
        }
    }

    public function load($data, $formName = null)
    {
        $request = Yii::$app->request->post();
        $this->keywords = (isset($request['keywords']) && !empty($request['keywords'])) ? implode(',', $request['keywords']) : null;
        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if($insert)
        {
            $this->created_by = Yii::$app->user->id;
        }

        if(!$insert)
        {
            $this->updated_by = Yii::$app->user->id;
            $this->updated_at = (new \DateTime())->format('Y-m-d H:i:s');
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        $parentAttributeLabels = parent::attributeLabels();
        $parentAttributeLabels['auto_save'] = Yii::t('app', 'Auto save as draft');
        $parentAttributeLabels['date'] = Yii::t('app', 'Date');
        $parentAttributeLabels['hour'] = Yii::t('app', 'Hour');
        $parentAttributeLabels['minute'] = Yii::t('app', 'Minute');
        return $parentAttributeLabels;
    }

    public function afterSave($insert,$changedAttributes)
    {
        // insert Categories
        $selectedCategories = Yii::$app->request->post('post_categories');
        if($selectedCategories !== null)
        {
            $data = [];
            foreach((array)$selectedCategories as $categoryId)
            {
                if($categoryId != '' && Category::findOne($categoryId) === null)
                {
                    $categoryModel = new Category;
                    $categoryModel->title = $categoryId;
                    $categoryModel->save();
                    $categoryId = $categoryModel->id;
                }

                if($categoryId != '')
                {
                    $data[] = [$this->id, $categoryId];
                }
            }

            if(!empty($data))
            {
                PostCategory::deleteAll(['post_id' => $this->id]);
                Yii::$app->db->createCommand()->batchInsert(PostCategory::tableName(), ['post_id', 'category_id'], $data)->execute();
            }
        }

        // insert tags
        $tags = Yii::$app->request->post('tags');
        if(!empty($tags))
        {
            $data = [];
            foreach((array)$tags as $t)
            {
                $tagId = null;
                if($t != '')
                {
                    $exists = Tag::findOne(['title' => $t]);
                    if($exists !== null)
                    {
                        $tagId = $exists->id;
                    }
                    else
                    {
                        $tagModel = new Tag;
                        $tagModel->title = $t;
                        $tagModel->save();
                        $tagId = $tagModel->id;
                    }
                }

                if($tagId !== null)
                {
                    $data[] = [$this->id, $tagId];
                }

            }

            if(!empty($data))
            {
                PostTag::deleteAll(['post_id' => $this->id]);
                Yii::$app->db->createCommand()->batchInsert(PostTag::tableName(), ['post_id', 'tag_id'], $data)->execute();
            }
        }
    }

    public function getSelectedCategoriesTitle($resultType = 'string')
    {
        $query = new \yii\db\Query;
        $categories = $query->select("c.id,c.title")->from(['pc' => PostCategory::tableName()])->leftJoin(['c' => Category::tableName()], 'pc.category_id = c.id')->where(['pc.post_id' => $this->id])->all();

        if($resultType == 'array')
        {
            return $categories;
        }

        $selectedCategories = \yii\helpers\ArrayHelper::getColumn($categories,function($element){
            return $element['title'];
        });
        return implode(', ',$selectedCategories);
    }

    public function getSelectedTags()
    {
        $result = $this->hasMany(PostTag::className(), ['post_id' => 'id'])
            ->select('t.*')
            ->alias('pt')
            ->innerJoin(['t' => Tag::tableName()], 'pt.tag_id = t.id')
            ->all();

        return \yii\helpers\ArrayHelper::map($result,'title','title');
    }

    public function getSelectedKeywords()
    {
        $newValue = [];
        if($this->id)
        {
            $model = Post::findOne($this->id);
            $value = explode(',', $model->keywords);
            foreach ((array)$value as $v)
            {
                if(!empty($v))
                {
                    $newValue[$v] = $v;
                }
            }
        }
        return $newValue;
    }

    public function postStatus()
    {
        return [
            '0' => Yii::t('app','Draft'),
            '1' => Yii::t('app','Publish'),
            '2' => Yii::t('app','Send in future'),
        ];
    }

    //
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getComments()
    {
        return $this->hasMany(Comment::className(), ['post_id' => 'id'])
            ->alias('c')
            ->where(['c.status' => 1])
            ->joinWith('createdBy')
            ->orderBy(['c.id' => SORT_DESC]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostCategories()
    {
        return $this->hasMany(PostCategory::className(), ['post_id' => 'id'])->joinWith('category');
    }

    /**
     * plus view count
     * @throws \yii\db\Exception
     */
    public function plusView()
    {
        if (!\common\models\Visitors::isBot()) {
            $this->view++;
            $this->save(false);
        }
    }

    /**
     * get a post with all details
     * @return array|bool
     */
    public function get()
    {
        $commentTable = \frontend\models\Comment::tableName();

        $model = Post::find()
            ->alias('p')
            ->select(['p.*', 'COUNT(c.id) comment_count'])
            ->innerJoinWith('createdBy u1')
            ->joinWith('updatedBy u2')
            ->leftJoin(['c' => $commentTable], "p.id = c.post_id  AND c.status = 1 AND c.post_id = {$this->id}")
            ->where(['p.id' => $this->id]);
        return $model->one();
    }

    public function tags()
    {
        return parent::getPostTags();
    }

    public function comments()
    {
        return $this->getComments()->all();
    }

    public function categories()
    {
        return $this->getPostCategories()->all();
    }

    /**
     * get related post
     * @return array|\yii\db\ActiveRecord[]
     */
    public function related()
    {
        $title = explode(' ',$this->title);
        $likes = [];
        foreach ($title as $t)
        {
            $likes[] = "(p.title LIKE '%{$t}%')";
        }
        $likes[] = "(IFNULL(t.title LIKE '%{$t}%',0))";
        $likes[] = "(IFNULL(p.keywords LIKE '%{$t}%',0))";

        $sql = "
            SELECT p.*,
                   (" . implode(' + ', $likes) . ") as hits
            FROM rs_post AS p
            LEFT JOIN rs_post_tag pt on pt.post_id = p.id
            LEFT JOIN rs_tag t on pt.tag_id = t.id
            WHERE p.id != {$this->id} AND p.status = 1
            HAVING hits > 0
            ORDER BY hits DESC
            LIMIT 5
        ";
        return $this->findBySql($sql)->all();
    }

    public function url()
    {
        return Url::to(['/post/default/view','id' => $this->id,'title' => $this->slug]);
    }

    public function author()
    {
        return "{$this->createdBy->last_name} {$this->createdBy->surname}";
    }

    public function updaterAuthor()
    {
        if($this->updatedBy !== null)
        {
            return "{$this->updatedBy->last_name} {$this->updatedBy->surname}";
        }

        return null;
    }

    public function authorUrl()
    {
        return Url::to(['/user/default/about', 'username' => $this->createdBy->username]);
    }

    public function updaterAuthorUrl()
    {
        return Url::to(['/user/about', 'username' => $this->updatedBy->username]);
    }

}
