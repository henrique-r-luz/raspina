<?php

namespace app\modules\setting\models;

use yii\db\Query;
use Yii;

/**
 * This is the model class for table "{{%setting}}".
 *
 * @property string $id
 * @property string $url
 * @property string $template
 * @property string $title
 * @property string $description
 * @property string $keyword
 * @property integer $page_size
 * @property string $language
 * @property string $direction
 * @property string $time_zone
 * @property string $date_format
 * @property string $sult
 */
class Setting extends \app\modules\setting\models\base\Setting
{
    public function pageSize()
    {
        return $this->getValue('page_size');
    }

    public function getUrl()
    {
        return $this->getValue('url');
    }

    public function getSult()
    {
        return $this->getValue('sult');
    }

    public function getValue($columnName)
    {
        $query = new Query;
        return $query->select($columnName)->from('{{%setting}}')->limit(1)->scalar();
    }

    public function get()
    {
        $setting = Setting::find()->one();
//        $setting['templateDir'] = '..' . DIRECTORY_SEPARATOR . Yii::getAlias('@template') . DIRECTORY_SEPARATOR . $setting['template'] . DIRECTORY_SEPARATOR;
//        $setting['templateUrl'] = $setting['url'] . Yii::getAlias('@templateUrl') . '/' .$setting['template'] . '/';
//        $setting['layout'] = $setting['templateDir'] . DIRECTORY_SEPARATOR . 'main.php';
        return $setting;
    }

    public function beforeSave($insert)
    {
        $len = mb_strlen($this->url);
        $url = $this->url;
        if($url[$len-1] != '/')
        {
            $this->url .= '/';
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function dateTimeFormats()
    {
        return [
            'yyyy/MM/dd - HH:mm' => Yii::$app->date->asDatetime('now', 'yyyy/MM/dd - HH:mm'),
            'd MMMM yy - HH:mm' => Yii::$app->date->asDatetime('now', 'd MMMM yy - HH:mm'),
            'E d MMMM yy - HH:mm' => Yii::$app->date->asDatetime('now', 'E d MMMM yy - HH:mm'),
        ];
    }

    public function languageList()
    {
        return [
            'fa-IR' => Yii::t('app', 'Persian'),
            'en-US' => Yii::t('app', 'English'),
            'ru-RU' => Yii::t('app', 'Russian'),
        ];
    }

    public function getLanguageDir($language)
    {
        $directions = [
            'fa-IR' => 'rtl',
            'en-US' => 'ltr',
            'ru-RU' => 'ltr',
        ];

        return $directions[$language];
    }

    public function timezoneList()
    {
        $timezone = timezone_identifiers_list();
        $list = [];
        foreach ($timezone as $t)
        {
            $list[$t] = $t;
        }

        return $list;
    }

    public function getSelectedKeywords()
    {
        $newValue = [];
        if($this->id)
        {
            $model = Setting::findOne($this->id);
            $value = explode(',', $model->keyword);
            foreach ((array)$value as $v)
            {
                if(!empty($v))
                {
                    $newValue[$v] = $v;
                }
            }
        }
        return $newValue;
    }
}
